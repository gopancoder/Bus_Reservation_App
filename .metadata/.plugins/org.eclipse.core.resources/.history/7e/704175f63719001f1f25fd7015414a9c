package org.jsp.reservationapp.service;

import java.util.Optional;

import org.jsp.reservationapp.dao.UserDao;
import org.jsp.reservationapp.dto.ResponseStructure;
import org.jsp.reservationapp.dto.UserRequest;
import org.jsp.reservationapp.exception.UserNotFoundException;
import org.jsp.reservationapp.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class UserService {
	@Autowired
	private UserDao dao;

	public ResponseEntity<ResponseStructure<User>> saveUser(UserRequest userRequest) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		structure.setData(dao.saveUser(user));
		structure.setMessage("User Saved");
		structure.setStatusCode(HttpStatus.ACCEPTED.value());
		return ResponseEntity.status(HttpStatus.ACCEPTED).body(structure);
	}

	public ResponseEntity<ResponseStructure<User>> updateUser(User user) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> rec = dao.findById(user.getId());

		if (rec.isPresent()) {
			User db = dao.saveUser(user);
			db.setAge(user.getAge());
			db.setEmail(user.getEmail());
			db.setGender(user.getGender());
			db.setName(user.getName());
			db.setPhone(user.getPhone());
			db.setPassword(user.getPassword());
			structure.setMessage("User Updated");
			structure.setData(db);
			structure.setStatusCode(HttpStatus.OK.value());
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Can't Update User as Id is INvalid");
	}

	public ResponseEntity<ResponseStructure<User>> findById(int id) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> rec = dao.findById(id);

		if (rec.isPresent()) {
			structure.setMessage("User Found");
			structure.setData(rec.get());
			structure.setStatusCode(HttpStatus.OK.value());
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Invalid User Id");
	}

	public ResponseEntity<ResponseStructure<User>> verifyUser(long phone, String password) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> rec = dao.verifyUser(phone, password);

		if (rec.isPresent()) {
			structure.setData(rec.get());
			structure.setMessage("User Verified");
			structure.setStatusCode(HttpStatus.OK.value());
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Can't Verified User as Phone Number and Password Invalid");
	}

	public ResponseEntity<ResponseStructure<User>> verifyUser(String email, String password) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> rec = dao.verifyUser(email, password);

		if (rec.isPresent()) {
			structure.setData(rec.get());
			structure.setMessage("User Verified");
			structure.setStatusCode(HttpStatus.OK.value());
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Can't Verified User as Email Id and Password Invalid");
	}

	public ResponseEntity<ResponseStructure<User>> deleteUser(int id) {
		ResponseStructure<User> structure = new ResponseStructure<>();
		Optional<User> rec = dao.findById(id);

		if (rec.isPresent()) {
			dao.deleteUser(id);
			structure.setMessage("User Deleted");
			structure.setData(rec.get());
			structure.setStatusCode(HttpStatus.OK.value());
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new UserNotFoundException("Can't Delete User as Id is Invalid");
	}

	private User mapToUser(UserRequest userRequest) {
		return User.builder().name(userRequest.getName()).phone(userRequest.getPhone()).email(userRequest.getEmail())
				.age(userRequest.getAge()).gender(userRequest.getGender()).password(userRequest.getPassword()).build();
	}

}
